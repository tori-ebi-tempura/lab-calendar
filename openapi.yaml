openapi: "3.0.0"

info:
  title: "lab-calendar"
  description: "this is lab-calendar's API"
  version: "1.0.0"

servers: 
- url: "http://localhost:4000"
  description: "ローカル環境"

tags:
  - name: "users"
    description: "ユーザの操作"
  - name: "klasses"
    description: "授業の操作"
  - name: "rooms"
    description: "教室の操作"

paths:
  "/users":
    get:
      summary: "ユーザ一覧の取得"
      tags: ["users"]
      deprecated: false
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userName: { type: string, example: "taro"}
                    studentNumber: { type: string, example: "ce123456"}
    post:
      summary: "ユーザの新規作成"
      tags: ["users"]
      deprecated: false
      requestBody:
        description: "ユーザ情報"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName: { type: string, example: "taro"}
                studentNumber: { type: string, example: "ce123456"}
                password: { type: string, format: password, example: "taro0000"}
      responses:
        "201":
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userName: { type: string, example: "taro"}
                  studentNumber: { type: string, example: "ce123456"}
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Bad Request"}
                  statusCode: { type: integer, example: 400}
        "409":
          description: "Conflict"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Conflict"}
                  statusCode: { type: integer, example: 409}



  "/users/{userId}":
    get:
      summary: "ユーザ情報の取得"
      tags: ["users"]
      deprecated: false
      parameters:
        - name: userId
          in: path
          required: true
          schema: {}
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userName: { type: string, example: "taro"}
                  studentNumber: { type: string, example: "ce123456"}
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Not Found"}
                  statusCode: { type: integer, example: 404}